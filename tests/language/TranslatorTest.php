<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-23 at 18:16:17.
 */
class TranslatorTest extends PHPUnit_Framework_TestCase {

    /**
     * @var MmfTranslator
     */
    protected $object;

    public static function setUpBeforeClass() {
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $prefix = __DIR__ . '/../../app/';
        $this->object = new Mmf\Language\Translator('spa', $prefix.'translate/');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers MmfTranslator::translate
     * @covers MmfTranslator::getTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testPlainIdTranslate() {
        $id = 'chicken';
        $this->assertEquals('pollo',$this->object->translate($id));
    }

    /**
     * @covers MmfTranslator::translate
     * @covers MmfTranslator::getTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testReplaceIdTranslate() {
        $id = 'How is %name%';
        $parameters = array('%name%' => 'pepito');
        $this->assertEquals('Quien es pepito',$this->object->translate($id, $parameters));
    }

    /**
     * @covers MmfTranslator::translate
     * @covers MmfTranslator::getTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testMultipleSentenceIdTranslate() {
        $id  = 'mamaframework is great';
        $id2 = 'mamaframework is amazing';
        $this->assertEquals('Mamaframework es genial',      $this->object->translate($id));
        $this->assertEquals('Mamaframework es espectacular',$this->object->translate($id2));
    }

    /**
     * @covers MmfTranslator::translateChoice
     * @covers MmfTranslator::getTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testTranslateChoice() {
        $id = 'singularPlural';
        $this->assertEquals('singular',$this->object->translateChoice($id, 0));
        $this->assertEquals('plural',  $this->object->translateChoice($id, 1));
    }

    /**
     * @covers MmfTranslator::setLocale
     * @covers MmfTranslator::getTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testSetLocale() {
        $this->object->setLocale('eng');
        $this->assertEquals('eng',$this->object->getLocale());
    }

    /**
     * @covers MmfTranslator::getLocale
     * @covers MmfTranslator::getTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testGetLocale() {
        $this->assertEquals('spa',$this->object->getLocale());
    }


}
