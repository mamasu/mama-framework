<?php

use Mmf\Model\PDO AS MmfPDO;
use Mmf\Auth\AuthAPI;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-25 at 15:36:21.
 */
class AuthAPITest extends \PHPUnit_Framework_TestCase {

    /**
     * @var AuthAPI
     */
    protected $objectguest;

    /**
     * @var AuthAPI
     */
    protected $objectUser;

    /**
     * @var AuthAPI
     */
    protected $objectAdmin;

    /**
     * @var AuthAPI
     */
    protected $objectUserN;

    public static function setUpBeforeClass() {
        //include_once __DIR__ . '/../include.php';
        include_once __DIR__ . '/../include.common.functions.php';
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers  \Mmf\Auth\Auth::__construct
     */
    protected function setUp() {
        $requestguest = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestguest->method('input')
                ->will($this->returnCallback('callbackRequestguestAuthAPI'));

        $requestUser = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();
        $requestUser->method('input')
                ->will($this->returnCallback('callbackRequestUserAuthAPI'));

        $requestAdmin = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestAdmin->method('input')
                ->will($this->returnCallback('callbackRequestAdminAuthAPI'));

        $requestUserNotAuth = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUserNotAuth->method('input')
                ->will($this->returnCallback('callbackRequestUserNotAutenticate'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $connection = new MmfPDO($config);

        $this->objectguest = new AuthAPI(null, $requestguest, $connection,
                $config);
        $this->objectUser = new AuthAPI(null, $requestUser, $connection,
                $config);
        $this->objectAdmin = new AuthAPI(null, $requestAdmin, $connection,
                $config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers  \Mmf\Auth\Auth::isAuthenticated
     * @covers  \Mmf\Auth\Auth::__construct
     * @covers  \Mmf\Auth\Auth::getUsername
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAuthenticated() {
        $this->assertEquals(false, $this->objectguest->isAuthenticated());
        $this->assertEquals(true, $this->objectUser->isAuthenticated());
        $this->assertEquals(true, $this->objectAdmin->isAuthenticated());
    }

    /**
     * @covers  \Mmf\Auth\Auth::isAuthenticated
     * @covers  \Mmf\Auth\Auth::__construct
     * @covers  \Mmf\Auth\AuthAPI::checkIfTokenIsValidAndUpdateTheExpireDate
     * @covers  \Mmf\Auth\AuthModel::getRoleAndUserFromToken
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAuthenticatedInvalidToken() {
        $requestUserNotAuth = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUserNotAuth->method('input')
                ->will($this->returnCallback('callbackRequestUserNotValidToken'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $connection = new MmfPDO($config);

        $authModel = new Mmf\Auth\AuthModel($connection);
        $authModel->updateExpireDate($requestUserNotAuth->input('token'),
                '2008-01-01 00:00:01'); //Update the expire date to not expire date

        try {
            $this->objectUserN = new AuthAPI(null, $requestUserNotAuth,
                    $connection, $config);
            $this->objectUserN->isAuthenticated();
            $this->assertEquals('Should be token expire',
                    'The token is not valid'); //Just to check the bad answer
        } catch (\Mmf\Auth\AuthException $e) { //God Answer
            $this->assertEquals(2000, $e->getCode());
        }
    }

    /**
     * @covers  \Mmf\Auth\Auth::isAuthenticated
     * @covers  \Mmf\Auth\Auth::__construct
     * @covers  \Mmf\Auth\AuthAPI::checkIfTokenIsValidAndUpdateTheExpireDate
     * @covers  \Mmf\Auth\AuthModel::getRoleAndUserFromToken
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAuthenticatedExpireDateInvalid() {
        $requestUserNotAuth = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUserNotAuth->method('input')
                ->will($this->returnCallback('callbackRequestUserNotAutenticate'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $connection = new MmfPDO($config);

        $authModel = new \Mmf\Auth\AuthModel($connection);
        $authModel->updateExpireDate($requestUserNotAuth->input('token'),
                '2008-01-01 00:00:01'); //Update the expire date to not expire date

        try {
            $this->objectUserN = new AuthAPI(null, $requestUserNotAuth,
                    $connection, $config);
            $this->objectUserN->isAuthenticated();
            $this->assertEquals('Should be token expire', 'Token is not expire');
        } catch (\Mmf\Auth\AuthException $e) {
            $this->assertEquals(2001, $e->getCode());
        }
    }

    /**
     * @covers  \Mmf\Auth\Auth::isAuthenticated
     * @covers  \Mmf\Auth\Auth::__construct
     * @covers  \Mmf\Auth\AuthAPI::checkIfTokenIsValidAndUpdateTheExpireDate
     * @covers  \Mmf\Auth\AuthModel::getRoleAndUserFromToken
     * @covers  \Mmf\Auth\AuthModel::updateExpireDate
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAuthenticatedExpireDateValid() {
        $requestUserNotAuth = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUserNotAuth->method('input')
                ->will($this->returnCallback('callbackRequestUserNotAutenticate'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $connection = new MmfPDO($config);

        $authModel = new \Mmf\Auth\AuthModel($connection);
        $authModel->updateExpireDate($requestUserNotAuth->input('token'),
                '2028-01-01 00:00:01'); //Update the expire date to not expire date

        $this->objectUserN = new AuthAPI(null, $requestUserNotAuth,
                $connection, $config);
        $this->assertEquals(true, $this->objectUserN->isAuthenticated());
    }

    /**
     * @covers  \Mmf\Auth\Auth::getUsername
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetUsername() {
        $this->assertEquals('guest', $this->objectguest->getUsername());
        $this->assertEquals('useruser', $this->objectUser->getUsername());
        $this->assertEquals('useradmin', $this->objectAdmin->getUsername());
    }

    /**
     * @covers  \Mmf\Auth\Auth::getRoleName
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetRoleName() {
        $this->assertEquals('guest', $this->objectguest->getRoleName());
        $this->assertEquals('user', $this->objectUser->getRoleName());
        $this->assertEquals('admin', $this->objectAdmin->getRoleName());
    }

    /**
     * @covers  \Mmf\Auth\Auth::getUserId
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetUserId() {
        $this->assertEquals(1, $this->objectguest->getUserId());
        $this->assertEquals(2, $this->objectUser->getUserId());
        $this->assertEquals(3, $this->objectAdmin->getUserId());
    }

    /**
     * @covers  \Mmf\Auth\Auth::setUsername
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testSetUsername() {
        $this->objectguest->setUsername('pepita');
        $this->objectUser->setUsername('pepita1');
        $this->objectAdmin->setUsername('pepita2');

        $this->assertEquals('pepita', $this->objectguest->getUsername());
        $this->assertEquals('pepita1', $this->objectUser->getUsername());
        $this->assertEquals('pepita2', $this->objectAdmin->getUsername());
    }

    /**
     * @covers  \Mmf\Auth\Auth::setRoleName
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testSetRoleName() {
        $this->objectguest->setRoleName('pepita');
        $this->objectUser->setRoleName('pepita1');
        $this->objectAdmin->setRoleName('pepita2');

        $this->assertEquals('pepita', $this->objectguest->getRoleName());
        $this->assertEquals('pepita1', $this->objectUser->getRoleName());
        $this->assertEquals('pepita2', $this->objectAdmin->getRoleName());
    }

    /**
     * @covers  \Mmf\Auth\Auth::setRoleName
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testSetUserId() {
        $this->objectguest->setUserId(20);
        $this->objectUser->setUserId(21);
        $this->objectAdmin->setUserId(22);

        $this->assertEquals(20, $this->objectguest->getUserId());
        $this->assertEquals(21, $this->objectUser->getUserId());
        $this->assertEquals(22, $this->objectAdmin->getUserId());
    }

    /**
     * @covers  \Mmf\Auth\AuthAPI::setDefaultLanguage
     * @covers  \Mmf\Auth\Auth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetUserLanguage() {
        $requestUser = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUser->method('input')
                ->will($this->returnCallback('callbackRequestUserAuthAPI'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $communication = $this->getMockBuilder('Mmf\IO\CommunicationInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $connection = new MmfPDO($config);
        $language = new Mmf\Language\LanguageDB($communication, $config);

        $this->objectUser = new AuthAPI(null, $requestUser, $connection,
                $config, $language);

        $this->assertEquals(true, true);
    }

}

function callbackRequestguestAuthAPI() {
    $functionArguments = func_get_args();
    $return = array('token' => null);
    return $return[$functionArguments[0]];
}

function callbackRequestUserAuthAPI() {
    $functionArguments = func_get_args();
    $return = array('token' => 'tokenuser');
    return $return[$functionArguments[0]];
}

function callbackRequestAdminAuthAPI() {
    $functionArguments = func_get_args();
    $return = array('token' => 'tokenadmin');
    return $return[$functionArguments[0]];
}

function callbackRequestUserNotAutenticate() {
    $functionArguments = func_get_args();
    $return = array('token' => 'tokenuserexpired');
    return $return[$functionArguments[0]];
}

function callbackRequestUserNotValidToken() {
    $functionArguments = func_get_args();
    $return = array('token' => 'not valid token');
    return $return[$functionArguments[0]];
}
