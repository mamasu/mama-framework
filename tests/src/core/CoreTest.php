<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-13 at 16:33:54.
 */
class CoreTest extends PHPUnit_Framework_TestCase {

    /**
     * @var MmfCore
     */
    protected $core;
    protected static $prefix = '../src/mvc/';

    public static function setUpBeforeClass() {
        //include_once __DIR__ . '/../include.php';
    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testCore() {
        $loader = $this->getMockBuilder('Mmf\Autoloader\AutoloaderInterface')->getMock();
        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')->getMock();
        $eventManager = $this->getMockBuilder('Mmf\Event\EventManagerInterface')->disableOriginalConstructor()->getMock();
        $request = $this->getMockBuilder('Mmf\IO\RequestInterface')->getMock();
        $response = $this->getMockBuilder('Mmf\IO\ResponseInterface')->getMock();
        $view = $this->getMockBuilder('Mmf\View\BasicViewInterface')->getMock();
        $language = $this->getMockBuilder('Mmf\Language\LanguageInterface')->getMock();
        $router = $this->getMockBuilder('Mmf\Routing\RoutingResolverAbstract')->disableOriginalConstructor()->getMock();
        $error = $this->getMockBuilder('Mmf\Controller\ErrorControllerInterface')->getMock();
        $session = $this->getMockBuilder('Mmf\Parameter\SessionInterface')->getMock();
        $pluginManager = $this->getMockBuilder('Mmf\Plugin\PluginManagerInterface')->disableOriginalConstructor()->getMock();
        $connection = $this->getMockBuilder('Mmf\Model\ConnectionInterface')->disableOriginalConstructor()->getMock();
        $auth = $this->getMockBuilder('Mmf\Auth\AuthInterface')->disableOriginalConstructor()->getMock();

        $this->core = new \Mmf\Core\Core(
            $loader,
            $config,
            $eventManager,
            $request,
            $response,
            $view,
            $language,
            $router,
            $error,
            $session,
            $connection,
            $auth
        );

        $this->assertEquals(true, strpos(get_class($this->core->auth()),'AuthInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->autoloader()),'AutoloaderInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->config()),'ParametersInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->eventManager()),'EventManagerInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->request()),'RequestInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->response()),'ResponseInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->view()),'BasicViewInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->language()),'LanguageInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->router()),'RoutingResolverAbstract')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->error()),'ErrorControllerInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->session()),'SessionInterface')?true:false);
        $this->assertEquals(true, strpos(get_class($this->core->connection()),'ConnectionInterface')?true:false);

        unset($this->core);
    }

}
