<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-13 at 16:33:54.
 */
class MySQLModelAbstractTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MmfConnectionInterface
     */
    protected $connection;

    protected $insertID;

    public static function setUpBeforeClass() {
    }


    public function setUp() {

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                       ->disableOriginalConstructor()
                       ->getMock();

        $config->method('get')
               ->will($this->returnCallback('callbackConfigModelAbstract'));
        $this->connection = new \Mmf\Model\PDO($config);
    }

    public function tearDown() {
        unset($this->connection);
    }

    /**
     * @group mvc
     * @group db
     * @group development
     */
    public function testBasicSelectQuery() {
        $model = new \App\Models\testmodel($this->connection);
        $selectResult = $model->testSelect();
        $this->assertEquals(count($selectResult)>0,true);
    }

    /**
     * @group mvc
     * @group db
     * @group development
     */
    public function testBasicCRUDQuery() {
        $model = new \App\Models\testmodel($this->connection);
        $result = $model->testInsert();
        $this->insertID = $result;
        $this->assertEquals($result>0,true);
        $result = $model->testUpdate($this->insertID);
        $this->assertEquals($result>0,true);
        $result = $model->testDelete($this->insertID);
        $this->assertEquals($result>0,true);
    }

    /**
     * @group mvc
     * @group db
     * @group development
     */
    public function testBadQuery() {
        $model = new \App\Models\testmodel($this->connection);
        try {
            $result = $model->testBadSQL ();
            $this->assertEquals(true, false);
        } catch (Mmf\Model\ModelException $e) {
            $this->assertEquals(true, true);
        }

    }

    /**
     * @group mvc
     * @group db
     * @group development
     */
    public function testNewDatabaseName() {
        try {
            $model = new \App\Models\testmodel($this->connection, 'default');
            $this->assertEquals(true, false);
        } catch (Mmf\Model\ModelException $e) {
            $this->assertEquals(true, true);
        }

    }

}

function callbackConfigModelAbstract() {
    $functionArguments = func_get_args();
    $conection1 = array('host'=>'localhost', 'port'=>'8889', 'name'=>'marketplace', 'user'=>'root', 'pass'=>'root');
    $conection2 = array('host'=>'localhost', 'port'=>'8889', 'name'=>'marketplace1', 'user'=>'root', 'pass'=>'root');
    $return = array('db_default'=>$conection1,'db_secondary'=>$conection2);
    return $return[$functionArguments[0]];
}

/**
 * SCRIPT TO INSERT THE DATABASE AND DO THE TEST, YOU MUST CREATE A DATABASE CALL marketplace
 CREATE TABLE `test` (
`id` int(11) NOT NULL,
  `name` varchar(40) COLLATE utf8_unicode_ci NOT NULL,
  `test` varchar(40) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `test`
--

INSERT INTO `test` (`id`, `name`, `test`) VALUES
(1, 'testname1', 'testcolum1'),
(2, 'testname2', 'testcolum2'),
(3, 'new name test', 'new test columtest'),
(4, 'new name test', 'new test columtest'),
(5, 'new name test', 'new test columtest'),
(6, 'new name test', 'new test columtest'),
(7, 'new name test', 'new test columtest'),
(8, 'new name test', 'new test columtest'),
(9, 'new name test', 'new test columtest'),
(10, 'new name test', 'new test columtest'),
(11, 'new name test', 'new test columtest'),
(12, 'new name test', 'new test columtest'),
(13, 'new name test', 'new test columtest'),
(14, 'new name test', 'new test columtest'),
(15, 'new name test', 'new test columtest'),
(16, 'new name test', 'new test columtest'),
(17, 'new name test', 'new test columtest'),
(18, 'new name test', 'new test columtest'),
(20, 'new name test', 'new test columtest'),
(21, 'new name test', 'new test columtest'),
(23, 'new name test', 'new test columtest'),
(25, 'new name test', 'new test columtest');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `test`
--
ALTER TABLE `test`
 ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `test`
--
ALTER TABLE `test`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=28;

 */