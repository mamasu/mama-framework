<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-23 at 18:16:17.
 */
class TranslatorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Mmf\Language\Translator
     */
    protected $object;

    public static function setUpBeforeClass() {
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $prefix = __DIR__ . '/../../../app/';
        $this->object = new Mmf\Language\Translator('spa', $prefix.'translate/');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testPlainIdTranslate() {
        $id = 'chicken';
        $this->assertEquals('pollo',$this->object->translate($id));
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testReplaceIdTranslate() {
        $id = 'How is %name%';
        $parameters = array('%name%' => 'pepito');
        $this->assertEquals('Quien es pepito',$this->object->translate($id, $parameters));
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testMultipleSentenceIdTranslate() {
        $id  = 'mamaframework is great';
        $id2 = 'mamaframework is amazing';
        $this->assertEquals('Mamaframework es genial',      $this->object->translate($id));
        $this->assertEquals('Mamaframework es espectacular',$this->object->translate($id2));
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testNotNullLocaleTranslate() {
        $id  = 'mamaframework is great';
        $this->assertEquals('Mamaframework es genial',      $this->object->translate($id, [], 'spa'));
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testInvalidLocaleTranslate() {
        $id  = 'mamaframework is great';
        try {
            $this->object->translate($id, [], 'rata');
            $this->assertEquals(true, false, 'Check if locale exists');
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals($e->getMessage(), "Invalid \"rata\" locale.", 'The exception not match with expected');
        }

    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testInvalidLocaleFileTranslate() {
        $id  = 'mamaframework is great';
        try {
            $this->object->translate($id, [], 'rat');
            $this->assertEquals(true, false, 'Check if locale exists');
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals($e->getMessage(), 'Invalid path file', 'The exception not match with expected');
        }

    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translate
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testNotIdTranslate() {
        $id  = 'mamaframework is greateeee';
        try {
            $this->object->translate($id, [], 'spa');
            $this->assertEquals(true, false, 'Check if locale exists');
        } catch (Mmf\Language\TranslateException $e) {
            $this->assertEquals($e->getMessage(), "Translation id not exists.($id)", 'the message of exception does not match');
        }

    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translateChoice
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testTranslateChoice() {
        $id = 'singularPlural';
        $this->assertEquals('singular',$this->object->translateChoice($id, 0));
        $this->assertEquals('plural',  $this->object->translateChoice($id, 1));
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::translateChoice
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @covers \Mmf\Language\Translator::getTranslation
     * @covers \Mmf\Language\Translator::assertValidLocale
     * @covers \Mmf\Language\Translator::getFileTranslations
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testTranslateNotNullLocaleChoice() {
        $id = 'singularPlural';
        $this->assertEquals('singular',$this->object->translateChoice($id, 0, [], 'spa'));
        $this->assertEquals('plural',  $this->object->translateChoice($id, 1, [], 'spa'));
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::setLocale
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testSetLocale() {
        $this->object->setLocale('eng');
        $this->assertEquals('eng',$this->object->getLocale());
    }

    /**
     * @covers \Mmf\Language\Translator::__construct
     * @covers \Mmf\Language\Translator::getLocale
     * @covers \Mmf\Language\Translator::getTranslationForId
     * @covers \Mmf\Language\Translator::getBasicTranslationForId
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testGetLocale() {
        $this->assertEquals('spa',$this->object->getLocale());
    }

    /**
     * @covers \Mmf\Language\TranslateException
     * @group translate
     * @group modules
     * @group development
     * @group production
     */
    public function testLanguageException() {
        try {
            throw new Mmf\Language\TranslateException('message', 10);
            $this->assertEquals(true, false, 'Exception does not working');
        } catch (Mmf\Language\TranslateException $e) {
            $this->assertEquals($e->getMessage(), 'message');
        }
    }

}
