<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-22 at 11:49:36.
 */
class ResponseAPIAutomaticTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ResponseAPIAutomatic
     */
    protected $object;

    public static function setUpBeforeClass() {

    }

    /**
     * @covers \Mmf\IO\ResponseAPIAutomatic::__construct
     */
    protected function setUp() {
        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
            ->disableOriginalConstructor()
            ->getMock();
        $config->method('get')
            ->will($this->returnCallback('callbackConfigAPIAutomatic'));
        $this->object = new Mmf\IO\ResponseAPIAutomatic($config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->object);
    }

    /**
     * @covers \Mmf\IO\ResponseAPIAutomatic::__construct
     * @covers \Mmf\IO\ResponseAPIAutomatic::formatResponse
     * @group io
     * @group modules
     * @group development
     * @group production
     */
    public function testFormatResponseString() {
        $response = 'hola bon dia';
        $responseFormat = $this->object->formatResponse($response);
        $this->assertEquals('{"success":true,"responseData":"hola bon dia"}', $responseFormat);
    }

    /**
     * @covers \Mmf\IO\ResponseAPIAutomatic::__construct
     * @covers \Mmf\IO\ResponseAPIAutomatic::formatResponse
     * @group io
     * @group modules
     * @group development
     * @group production
     */
    public function testFormatResponseArrayOrObject() {
        $response = array('hola bon dia');
        $responseFormat = $this->object->formatResponse($response);
        $this->assertEquals('{"success":true,"responseData":["hola bon dia"]}', $responseFormat);
    }

    /**
     * @covers \Mmf\IO\ResponseAPIAutomatic::__construct
     * @covers \Mmf\IO\ResponseAPIAutomatic::formatResponseBad
     * @group io
     * @group modules
     * @group development
     * @group production
     */
    public function testFormatResponseBadString() {
        $response = array('hola bon dia');
        $responseFormat = $this->object->formatResponseBad($response);
        $this->assertEquals('{"success":false,"responseData":["hola bon dia"]}', $responseFormat);
    }

    /**
     * @covers \Mmf\IO\ResponseAPIAutomatic::__construct
     * @covers \Mmf\IO\ResponseAPIAutomatic::formatResponseBad
     * @group io
     * @group modules
     * @group development
     * @group production
     */
    public function testFormatResponseBadRouting() {
        $response = ['errorCode'    => 1600,
                     'errorMessage' => 'The URL not match with any of our defined routes'];
        $responseFormat = $this->object->formatResponseBad($response);
        $this->assertEquals('{"success":false,"responseData":{"errorCode":1600,"errorMessage":"The URL not match with any of our defined routes"}}', $responseFormat);
    }

    /**
     * @covers \Mmf\IO\ResponseAPIAutomatic::__construct
     * @group io
     * @group modules
     * @group development
     * @group production
     */
    public function testFailCreatingResponse() {
        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
            ->disableOriginalConstructor()
            ->getMock();
        $config->method('get')
            ->will($this->returnCallback('callbackConfigAPIAutomaticBadResponse'));
        try{
            $responseAPIAutomatic = new Mmf\IO\ResponseAPIAutomatic($config);
            $this->assertEquals(true, false, 'Check that the ResponseJsonBADD does not exist');
        } catch (\Mmf\Controller\Exception $e) {
            $this->assertEquals(true, true);
        }
    }
}

function callbackConfigAPIAutomatic() {
    $functionArguments = func_get_args();

    $mvc   = ['defaultRespJson'=>"Mmf\\IO\\ResponseJson"];
    $return = array('mvc'   => $mvc);
    return $return[$functionArguments[0]];
}

function callbackConfigAPIAutomaticBadResponse() {
    $functionArguments = func_get_args();

    $mvc   = ['defaultRespJson'=>"Mmf\\IO\\ResponseJsonBADD"];
    $return = array('mvc'   => $mvc);
    return $return[$functionArguments[0]];
}
