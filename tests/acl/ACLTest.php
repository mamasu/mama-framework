<?php
require_once __DIR__ . '/../../../vendor/autoload.php';
gc_disable();

use Mmf\ACL\ACL;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-21 at 14:56:46.
 */
class ACLTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ACLWeb
     */
    protected $objectguest;
    protected $objectUser;
    protected $objectAdmin;
    protected $objectBadRoleName;
    protected $connection;

    public static function setUpBeforeClass() {
       // include_once __DIR__ . '/../include.php';
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $authguest = $this->getMockBuilder('Mmf\Auth\AuthInterface')
                ->disableOriginalConstructor()
                ->setMethods(array('authenticate', 'isAuthenticated', 'getUsername',
                    'getUserId', 'getRoleId', 'setRoleId', 'getRoleName', 'setUsername',
                    'setRoleName', 'setUserId', 'logout', '__construct'))
                ->getMock();

        $authguest->expects($this->any())
                ->method('getRoleName')
                ->willReturn('guest');

        $authUser = $this->getMockBuilder('Mmf\Auth\AuthInterface')
                ->disableOriginalConstructor()
                ->setMethods(array('authenticate', 'isAuthenticated', 'getUsername',
                    'getUserId', 'getRoleId', 'setRoleId', 'getRoleName', 'setUsername',
                    'setRoleName', 'setUserId', 'logout','__construct'))
                ->getMock();

        $authUser->expects($this->any())
                ->method('getRoleName')
                ->willReturn('user');

        $authAdmin = $this->getMockBuilder('Mmf\Auth\AuthInterface')
                ->disableOriginalConstructor()
                ->setMethods(array('authenticate', 'isAuthenticated', 'getUsername',
                    'getUserId', 'getRoleId', 'setRoleId', 'getRoleName', 'setUsername',
                    'setRoleName', 'setUserId', 'logout', '__construct'))
                ->getMock();

        $authAdmin->expects($this->any())
                ->method('getRoleName')
                ->willReturn('admin');

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfigACL'));

        $this->connection = new \Mmf\MVC\PDO($config);

        $this->objectguest       = new ACL($authguest, $this->connection);
        $this->objectUser        = new ACL($authUser, $this->connection);
        $this->objectAdmin       = new ACL($authAdmin, $this->connection);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->objectguest);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAllowedguest() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Product');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('show');

        $allowed = $this->objectguest->isAllowed($routingRule);
        $this->assertEquals(true, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsNotAllowedguest() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Product');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('otheraction');

        $allowed = $this->objectguest->isAllowed($routingRule);
        $this->assertEquals(false, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAllowedUserOtherAction() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Product');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('otheraction');

        $allowed = $this->objectUser->isAllowed($routingRule);
        $this->assertEquals(true, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAllowedUser() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Client');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('save');

        $allowed = $this->objectUser->isAllowed($routingRule);
        $this->assertEquals(true, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsNotAllowedUser() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Product');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('show');

        $allowed = $this->objectUser->isAllowed($routingRule);
        $this->assertEquals(false, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testAllowedAdmin() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Product');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('show');

        $allowed = $this->objectAdmin->isAllowed($routingRule);
        $this->assertEquals(true, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testAllowedAdminParentRole() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Client');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('save');

        $allowed = $this->objectAdmin->isAllowed($routingRule);
        $this->assertEquals(true, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testNotAllowedAdmin() {
        $routingRule = $this->getMockBuilder('Mmf\Routing\RoutingRuleAbstract')
                ->disableOriginalConstructor()
                ->setMethods(array('getRegularExpression', 'getController',
                    'getAction', 'getInput', 'getOutput',
                    'setRegularExpression', 'setController',
                    'setAction', 'setInput', 'setOutput', 'getMethod',
                    'setMethod'))
                ->getMock();

        $routingRule->expects($this->any())
                ->method('getController')
                ->willReturn('Client');

        $routingRule->expects($this->any())
                ->method('getAction')
                ->willReturn('pepito');

        $allowed = $this->objectAdmin->isAllowed($routingRule);
        $this->assertEquals(false, $allowed);
    }

    /**
     * @covers \Mmf\ACL::isAllowed
     * @covers \Mmf\ACL::__construct
     * @covers \Mmf\ACL::forceRole
     * @covers \Mmf\ACL::getAccess
     * @covers \Mmf\ACL::getRolesChain
     * @group acl
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testBadRoleName() {
        $authBadRoleName = $this->getMockBuilder('Mmf\Auth\AuthInterface')
                ->disableOriginalConstructor()
                ->setMethods(array('authenticate', 'isAuthenticated', 'getUsername',
                    'getUserId', 'getRoleId', 'setRoleId', 'getRoleName', 'setUsername',
                    'setRoleName', 'setUserId', 'logout', '__construct'))
                ->getMock();

        $authBadRoleName->expects($this->any())
                ->method('getRoleName')
                ->willReturn('adminbadname');

        try {
            $this->objectBadRoleName = new ACL($authBadRoleName, $this->connection);
        } catch (Mmf\ACL\ACLException $exception) {
            $this->assertEquals(1700, $exception->getCode());
            $this->assertEquals("Role name doesn't exist in database", $exception->getMessage());
            $exceptionThrowIT = 'no exception throw it';
        }

        $this->assertEquals($exceptionThrowIT, 'no exception throw it');
    }
}

function callbackSessionguestACL() {
    $functionArguments = func_get_args();
    $return = array('roleName' => 'guest');
    return $return[$functionArguments[0]];
}

function callbackSessionUserACL() {
    $functionArguments = func_get_args();
    $return = array('roleName' => 'user');
    return $return[$functionArguments[0]];
}

function callbackSessionAdminACL() {
    $functionArguments = func_get_args();
    $return = array('roleName' => 'admin');
    return $return[$functionArguments[0]];
}

function callbackConfigACL() {
    $functionArguments = func_get_args();
    $conection1 = array('host' => 'localhost', 'port' => '8889', 'name' => 'marketplace',
        'user' => 'root', 'pass' => 'root');

    $conection2 = array('host' => 'localhost', 'port' => '8889', 'name' => 'marketplace1',
        'user' => 'root', 'pass' => 'root');

    $return = array('db_default' => $conection1, 'db_secondary' => $conection2);
    return $return[$functionArguments[0]];
}
