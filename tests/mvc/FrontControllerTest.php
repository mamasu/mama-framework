<?php

use Mmf\MVC\FrontController;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-13 at 16:33:54.
 */
class FrontControllerTest extends PHPUnit_Framework_TestCase {

    /**
     * @var MmfCore
     */
    protected $core;

    public static function setUpBeforeClass() {
        include_once __DIR__ . '/../include.php';
    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testGetMethodVarsAndSendToControllerFunction() {
        $config = $this->getMockBuilder ('Mmf\Parameter\ParametersInterface')->getMock ();
        $autoloader = $this->getMockBuilder ('Mmf\Autoloader\AutoloaderInterface')->getMock ();
        $request = $this->getMockBuilder ('Mmf\IO\RequestInterface')->getMock ();
        $communication = $this->getMockBuilder ('Mmf\IO\CommunicationInterface')
            ->getMock ();
        $frontController = new FrontController($autoloader, $config, $communication);

        $classInstance = $frontController->callClassAndMethodWithInputArguments ('\\Mmf\\MVC\\controllers\\TestController', 'testFunction', $request);

        $this->assertEquals ($classInstance, true);
    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testGetMethodVarAndSendToChildOfParentController() {
        $_GET['test'] = '';
        $_GET['foo'] = '';
        $_GET['var'] = '';

        $config = $this->getMockBuilder ('Mmf\Parameter\ParametersInterface')
            ->disableOriginalConstructor ()
            ->getMock ();

        $configAarrayReturned = ['coreClass' => '\\Mmf\\MVC\\Core'];
        $config->method ('get')
            ->willReturn ($configAarrayReturned);

        $autoloader = $this->getMockBuilder ('Mmf\Autoloader\AutoloaderInterface')
            ->getMock ();

        $request = $this->getMockBuilder ('Mmf\IO\RequestInterface')
            ->disableOriginalConstructor ()
            ->setMethods (array('input', 'setInput', 'filterVar'))
            ->getMock ();

        $request->expects ($this->any ())
            ->method ('input')
            ->will ($this->returnCallback ('callbackRequest'));

        $request->method ('setInput');
        $request->method ('filterVar');

        $eventManager = $this->getMockBuilder ('Mmf\Event\EventManagerInterface')
            ->disableOriginalConstructor ()
            ->getMock ();

        $response = $this->getMockBuilder ('Mmf\IO\ResponseInterface')
            ->getMock ();

        $view = $this->getMockBuilder ('Mmf\MVC\BasicViewInterface')
            ->getMock ();

        $language = $this->getMockBuilder ('Mmf\Language\LanguageInterface')
            ->getMock ();

        $router = $this->getMockBuilder ('Mmf\Routing\RoutingResolverAbstract')
            ->disableOriginalConstructor ()
            ->getMock ();

        $error = $this->getMockBuilder ('Mmf\MVC\ErrorControllerInterface')
            ->getMock ();

        $session = $this->getMockBuilder ('Mmf\Parameter\SessionInterface')
            ->getMock ();

        /*$pluginManager = $this->getMockBuilder ('Mmf\Plugin\PluginManagerInterface')
            ->disableOriginalConstructor ()
            ->getMock ();
        */

        $communication = $this->getMockBuilder ('Mmf\IO\CommunicationInterface')
            ->getMock ();

        $auth = $this->getMockBuilder('Mmf\Auth\AuthInterface')->disableOriginalConstructor()->getMock();

        $connection = $this->getMockBuilder ('Mmf\MVC\ConnectionInterface')->disableOriginalConstructor ()->getMock ();
        $frontController = new FrontController($autoloader, $config, $communication);

        $mmfCoreController = $frontController->createCoreAndController ('\\Mmf\\MVC\\controllers\\TestExtendsController',
                                                                        $eventManager,
                                                                        $request,
                                                                        $response,
                                                                        $view,
                                                                        $language,
                                                                        $router,
                                                                        $error,
                                                                        $session,
                                                                        $connection,
                                                                        $auth);
        $classInstance = $frontController->callClassAndMethodWithInputArguments ($mmfCoreController, 'testFunction', $request);

        $this->assertEquals ($classInstance, 'test');
    }


    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testGoodResponseFunctionality() {
        $_GET['test'] = '';
        $_GET['foo'] = '';
        $_GET['var'] = '';
        $_GET['token'] = 'tokenuser';
        $returnAction = $this->simulateFrontControllerRequest('/routingtest/12/', $_GET);
        $this->assertEquals ('{"success":true,"responseData":["1",2,4,""]}',$returnAction);

    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testMustArguments() {
//        $_GET['test'] = '';
//        $_GET['foo'] = '';
//        $_GET['var'] = '';
        $_GET['token'] = 'tokenuser';
        $returnAction = $this->simulateFrontControllerRequest('/routingtest/12/', $_GET);
        $this->assertEquals ('{"success":false,"responseData":{"errorCode":1501,"errorMessage":"The param test is mandatory"}}',$returnAction);

    }

        /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testDefaultArguments() {
        $_GET['test'] = '';
        $_GET['foo'] = '';
//        $_GET['var'] = '';
        $_GET['token'] = 'tokenuser';
        $returnAction = $this->simulateFrontControllerRequest('/routingtest/12/', $_GET);
        $this->assertEquals ('{"success":true,"responseData":["1",2,4,"defaultvalue"]}',$returnAction);

    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testBadResponseFunctionality() {
        $_GET['test'] = '';
        $_GET['foo'] = '';
        $_GET['var'] = '';
        $_GET['token'] = 'tokenuser';
        $returnAction = $this->simulateFrontControllerRequest('/routingtestbadresponse/12/', $_GET);
        $this->assertEquals ('{"success":false,"responseData":{"errorCode":0,"errorMessage":"Message of bad response 12"}}',$returnAction);
    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testNotAllowResponseFunctionality() {
        $_GET['test'] = '';
        $_GET['foo'] = '';
        $_GET['var'] = '';
        $_GET['token'] = '';
        $returnAction = $this->simulateFrontControllerRequest('/routingtestbadresponse/12/', $_GET);
        $this->assertEquals ('{"success":false,"responseData":{"errorCode":1500,"errorMessage":"User not allow to access"}}',$returnAction);
    }

    /**
     * @group mvc
     * @group modules
     * @group development
     * @group production
     */
    public function testNotNotResolverURLFunctionality() {
        $_GET['test'] = '';
        $_GET['foo'] = '';
        $_GET['var'] = '';
        $_GET['token'] = '';
        $returnAction = $this->simulateFrontControllerRequest('/urlnotexist/', $_GET);
        $this->assertEquals('{"success":false,"responseData":{"errorCode":1600,"errorMessage":"There is no rule resolving this route"}}', $returnAction);
        //$this->assertEquals('{"success":false,"responseData":{"errorCode":1600,"errorMessage":"The URL not match with any of our defined routes"}}', $returnAction);
        //$this->assertEquals ('{"success":false,"responseData":"ACL: User not allow to access"}',$returnAction);
    }

    /**
     * Function to simulate End to End MmfRequest.
     *
     * @param type $url
     * @param type $params
     * @return type
     * @throws Exception
     */
    public function simulateFrontControllerRequest($url, $params) {
        $_GET = $params;
        try {
            $prefix = __DIR__ . '/../../../src/core/';
            //Set error var to zero
            $error = 0;

            //Create the autoloader with the route base of the files
            $autoloader = new \Mmf\Autoloader\Autoloader(array(), $prefix);
            //Include the config path
            $autoloader->addNewAutoloadPath ('/mmf/parameter');

            //Create the new Config
            $config = new \Mmf\Parameter\Config();

            //Create the new Communication
            $communication = new \Mmf\IO\CommunicationHttp();
            $communication->setRoute ($url);
            $communication->setMethod ('GET');

            //Create the new FrontController and pass the autoloader
            $frontController = new \Mmf\MVC\FrontController($autoloader, $config, $communication);

            $config->addConfigVars ($prefix . 'config.ini');

            //Execute the Main Function
            $returnAction = $frontController->main ();

            //Check if there is and error
            $error = $frontController->executionErrors;
            $errorText = $frontController->messageErrors;
            $errortraceText = $frontController->traceRouteErrors;

        } catch (\Exception $e) {
            $this->assertEquals(true, $e->getMessage());
            $errorText      = $e->getMessage().$e->getLine();
            $errortraceText = $e->getTrace();
            throw $e;
        }

        if($error != 0) {
            echo PHP_EOL.'-ERROR FROM FRONT CONTROLLER:'.$errorText.PHP_EOL;
            throw new \Exception('TEST FAIL, loock at the Output window and check the ERROR FROM FRONT CONTROLLER TEXT');
        }
        return $returnAction;
    }
}

function callbackRequest() {
    $functionArguments = func_get_args();
    $return = array('test'=>'valueoftest','foo'=>'valueoffoo','var'=>null);
    return $return[$functionArguments[0]];
}