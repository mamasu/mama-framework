<?php

use Mmf\MVC\PDO AS MmfPDO;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-25 at 15:36:21.
 */
class MmfAuthBasicTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MmfAuthBasic
     */
    protected $objectguest;

    /**
     * @var MmfAuthBasic
     */
    protected $objectUser;

    /**
     * @var MmfAuthBasic
     */
    protected $objectAdmin;

    /**
     * @var MmfAuthBasic
     */
    protected $objectUserN;

    public static function setUpBeforeClass() {
        //include_once __DIR__ . '/../include.php';
        include_once __DIR__ . '/../include.common.functions.php';
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers MmfAuth::__construct
     */
    protected function setUp() {
        $requestguest = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();
        $requestguest->method('input')
                ->will($this->returnCallback('callbackRequestguestAuthBasic'));

        $requestUser = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUser->method('input')
                ->will($this->returnCallback('callbackRequestUserAuthBasic'));

        $requestAdmin = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestAdmin->method('input')
                ->will($this->returnCallback('callbackRequestAdminAuthBasic'));

        $requestUserNotAuth = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUserNotAuth->method('input')
                ->will($this->returnCallback('callbackRequestUserNotValidUser'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $connection = new MmfPDO($config);

        $this->objectguest = new Mmf\Auth\AuthBasic(null, $requestguest, $connection,
                $config);
        $this->objectUser = new Mmf\Auth\AuthBasic(null, $requestUser, $connection,
                $config);
        $this->objectAdmin = new Mmf\Auth\AuthBasic(null, $requestAdmin, $connection,
                $config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers MmfAuth::isAuthenticated
     * @covers MmfAuthBasic::authenticate
     * @covers MmfAuth::__construct
     * @covers MmfAuth::getUsername
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testIsAuthenticated() {
        $this->assertEquals(false, $this->objectguest->isAuthenticated());
        $this->assertEquals(true, $this->objectUser->isAuthenticated());
        $this->assertEquals(true, $this->objectAdmin->isAuthenticated());
    }

    /**
     * @covers MmfAuth::getUsername
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetUsername() {
        $this->assertEquals('guest', $this->objectguest->getUsername());
        $this->assertEquals('useruser', $this->objectUser->getUsername());
        $this->assertEquals('useradmin', $this->objectAdmin->getUsername());
    }

    /**
     * @covers MmfAuth::getRoleName
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetRoleName() {
        $this->assertEquals('guest', $this->objectguest->getRoleName());
        $this->assertEquals('user', $this->objectUser->getRoleName());
        $this->assertEquals('admin', $this->objectAdmin->getRoleName());
    }

    /**
     * @covers MmfAuth::getUserId
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetUserId() {
        $this->assertEquals(1, $this->objectguest->getUserId());
        $this->assertEquals(2, $this->objectUser->getUserId());
        $this->assertEquals(3, $this->objectAdmin->getUserId());
    }

    /**
     * @covers MmfAuth::setUsername
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testSetUsername() {
        $this->objectguest->setUsername('pepita');
        $this->objectUser->setUsername('pepita1');
        $this->objectAdmin->setUsername('pepita2');

        $this->assertEquals('pepita', $this->objectguest->getUsername());
        $this->assertEquals('pepita1', $this->objectUser->getUsername());
        $this->assertEquals('pepita2', $this->objectAdmin->getUsername());
    }

    /**
     * @covers MmfAuth::setRoleName
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testSetRoleName() {
        $this->objectguest->setRoleName('pepita');
        $this->objectUser->setRoleName('pepita1');
        $this->objectAdmin->setRoleName('pepita2');

        $this->assertEquals('pepita', $this->objectguest->getRoleName());
        $this->assertEquals('pepita1', $this->objectUser->getRoleName());
        $this->assertEquals('pepita2', $this->objectAdmin->getRoleName());
    }

    /**
     * @covers MmfAuth::setRoleName
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testSetUserId() {
        $this->objectguest->setUserId(20);
        $this->objectUser->setUserId(21);
        $this->objectAdmin->setUserId(22);

        $this->assertEquals(20, $this->objectguest->getUserId());
        $this->assertEquals(21, $this->objectUser->getUserId());
        $this->assertEquals(22, $this->objectAdmin->getUserId());
    }

    /**
     * @covers MmfAuthBasic::setDefaultLanguage
     * @covers MmfAuth::__construct
     * @group auth
     * @group db
     * @group modules
     * @group development
     * @group production
     */
    public function testGetUserLanguage() {
        $requestUser = $this->getMockBuilder('Mmf\IO\RequestInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $requestUser->method('input')
                ->will($this->returnCallback('callbackRequestUserAuthBasic'));

        $config = $this->getMockBuilder('Mmf\Parameter\ParametersInterface')
                ->disableOriginalConstructor()
                ->getMock();

        $config->method('get')
                ->will($this->returnCallback('callbackConfig'));

        $communication = $this->getMockBuilder('Mmf\IO\CommunicationInterface')
                ->disableOriginalConstructor()
                ->getMock();


        $connection = new MmfPDO($config);
        $language = new \Mmf\Language\LanguageDB($communication, $config);

        $this->objectUser = new \Mmf\Auth\AuthBasic(null, $requestUser, $connection,
                $config, $language);
        $this->assertEquals(true, true);
    }

}

function callbackRequestguestAuthBasic() {
    $functionArguments = func_get_args();
    $return = array('token'=>null, 'Authorization'=>null, 'username' => 'userguess', 'password' => 'testpassword');
    return $return[$functionArguments[0]];
}

function callbackRequestUserAuthBasic() {
    $functionArguments = func_get_args();
    $return = array('token'=>null, 'Authorization'=> 'Basic dXNlcnVzZXI6dGVzdHBhc3N3b3Jk', 'username' => 'useruser', 'password' => 'testpassword');
    return $return[$functionArguments[0]];
}

function callbackRequestAdminAuthBasic() {
    $functionArguments = func_get_args();
    $return = array('token'=>null, 'Authorization'=> 'Basic dXNlcmFkbWluOnRlc3RwYXNzd29yZA==', 'username' => 'useradmin', 'password' => 'testpassword');
    return $return[$functionArguments[0]];
}

function callbackRequestUserNotValidUser() {
    $functionArguments = func_get_args();
    $return = array('token'=>null, 'Authorization'=> 'Basic dXNlcmFkbWluOmFzZGY=', 'username' => 'userguess', 'password' => 'asdf');
    return $return[$functionArguments[0]];
}
